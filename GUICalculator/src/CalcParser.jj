options
{
  static = false;
}
PARSER_BEGIN(Parser)
import java.io.*;

class Parser {
}
PARSER_END(Parser)
TOKEN : {
    <NUM     : (["0"-"9"])+>
 |  <DOT     : "." >
 |  <PLUSOP  : "+" >
 |  <MULOP   : "*" >
 |  <MINUSOP : "-" >
 |  <DIVOP   : "/" >
 |  <OPEN    : "(" >
 |  <CLOSE   : ")" >
 |  <EQOP    : "=" >
}
SKIP : {
    " " | "\n" | "\r"
}
public double start() :
{
    double root;
}
{
    root=sum()
    <EQOP> { return root; }
}

public double sum() :
{
    double root, node;
}
{
    root=prod()
    ( <PLUSOP> node=prod() {
		root +=node;
       }
     |
	 <MINUSOP> node=prod() {
		root -= node;
       }
   )* { return root; }
}


private double prod() :
{
	double node, root;
}
{
    root=dot()
  ( <MULOP> node=dot() {
		root *= node;
     }
   |
   <DIVOP> node =dot() {
     if(node == 0)
     	throw new ParseException();
		root /= node;
       }
   )* { return root; }
}private double dot() :
{  double root,node;
  String tmp;
}
{	root=atai()
	(	  <DOT> node=atai(){
	    tmp=Double.toString(node);	 	root = root + node / Math.pow(10,tmp.length()-2);
	  }	)*{return root;}
}
private double atai() :
{
  double node;
}
{
	node=num() { return node; }
	|<OPEN> node=sum() <CLOSE> {return node;}
}

private double num() :
{
}
{
  <NUM> {
    	return Double.parseDouble(token.image);}
}
