options
{
  static = false;
}
PARSER_BEGIN(Parser)
import java.io.*;

class Parser {
}
PARSER_END(Parser)
TOKEN : {
    <NUM     : (["0"-"9"])+>
 |  <DOT     : "." >
 |  <PLUSOP  : "+" >
 |  <MULOP   : "*" >
 |  <MINUSOP : "-" >
 |  <DIVOP   : "/" >
 |  <OPEN    : "(" >
 |  <CLOSE   : ")" >
 |  <EQOP    : "=" >
}
SKIP : {
    " " | "\n" | "\r"
}
public BigDecimal start() :
{
    BigDecimal root;
}
{
    root=sum()
    <EQOP> { return root; }
}

public BigDecimal sum() :
{
    BigDecimal root, node;
}
{
    root=prod()
    ( <PLUSOP> node=prod() {
		root= root.add(node);
       }
     |
	 <MINUSOP> node=prod() {
		root = root.subtract(node);
       }
   )* { return root; }
}


private BigDecimal prod() :
{
	BigDecimal node, root;
}
{
    root=dot()
  ( <MULOP> node=dot() {
		root = root.multiply(node);
     }
   |
   <DIVOP> node =dot() {
     if(node.equals(0))
     	throw new ParseException();
     else
		root = root.divide(node);
       }
   )* { return root; }
}private BigDecimal dot() :
{  BigDecimal root,node;
  String tmp;
}
{	root=atai()
	(	  <DOT> node=atai(){	 	root = root.add(node.divide(new BigDecimal(Math.pow(10,node.toString().length()))));
	  }	)*{return root;}
}
private BigDecimal atai() :
{
  BigDecimal node;
}
{
	node=num() { return node; }
	|<OPEN> node=sum() <CLOSE> {return node;}
}

private BigDecimal num() :
{
}
{
  <NUM> {
    	return new BigDecimal(token.image);}
}
